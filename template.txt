import java.util.*;

public class Generic<T> {
    public List<T> elements;

    public Generic() {
        this.elements = new ArrayList<>();
    }

    // Method to add elements to the list
    public void addElement(T element) {
        elements.add(element);
    }

    // Checking if a number is even
    public boolean isEven(int number) {
        return number % 2 == 0;
    }

    // Counting even numbers
    public int countEven() {
        int count = 0;
        for (T element : elements) {
            if (isEven((Integer) element)) {
                count++;
            }
        }
        return count;
    }

    public List<Integer> Even() { 
        List<Integer> l = new ArrayList<>();
        for (T element : elements) {
            if (isEven((Integer) element)) {
                l.add((Integer) element);
            }
        }
        return l;
    }

    // Checking if a number is odd
    public boolean isOdd(int number) {
        return number % 2 != 0;
    }

    // Counting odd numbers
    public int countOdd() {
        int count = 0;
        for (T element : elements) {
            if (isOdd((Integer) element)) {
                count++;
            }
        }
        return count;
    }

    public List<Integer> Odd() {
        List<Integer> l = new ArrayList<>();
        for (T element : elements) {
            if (isOdd((Integer) element)) {
                l.add((Integer) element);
            }
        }
        return l;
    }

    // Checking if a number is a palindrome
    public boolean isPalindrome(int number) {
        int original = number;
        int reversed = 0;
        while (number > 0) {
            int digit = number % 10;
            reversed = reversed * 10 + digit;
            number /= 10;
        }
        return original == reversed;
    }

    // Counting palindromes
    public int countPalindromes() {
        int count = 0;
        for (T element : elements) {          
            if (isPalindrome((Integer) element)) {
                count++;
            }
        }
        return count;
    }

    public List<Integer> palindrome() {
        List<Integer> l = new ArrayList<>();
        for (T element : elements) {
            if (isPalindrome((Integer) element)) {
                l.add((Integer) element);
            }
        }
        return l;
    }

    // Checking if a number is prime
    public boolean isPrime(int number) {
        if (number <= 1) return false;
        if (number == 2) return true;
        if (number % 2 == 0) return false;
        for (int i = 3; i * i <= number; i += 2) {
            if (number % i == 0) return false;
        }
        return true;
    }

    // Counting prime numbers
    public int countPrimes() {
        int count = 0;
        for (T element : elements) {
            if (isPrime((Integer) element)) {
                count++;
            }
        }
        return count;
    }

    public List<Integer> prime() {
        List<Integer> l = new ArrayList<>();
        for (T element : elements) {
            if (isPrime((Integer) element)) {
                l.add((Integer) element);
            }
        }
        return l;
    }

    public static void main(String[] args) {
        // Creating an instance for Integer type
        Generic<Integer> integerGeneric = new Generic<>();
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter number of elements:");
        int n = sc.nextInt();

        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++) {
            integerGeneric.addElement(sc.nextInt());
        }

        // Display results
        System.out.println("Even count: " + integerGeneric.countEven());
        System.out.println("Even list: " + integerGeneric.Even());
        System.out.println("Odd count: " + integerGeneric.countOdd());
        System.out.println("Odd list: " + integerGeneric.Odd());
        System.out.println("Palindrome count: " + integerGeneric.countPalindromes());
        System.out.println("Palindrome list: " + integerGeneric.palindrome());
        System.out.println("Prime count: " + integerGeneric.countPrimes());
        System.out.println("Prime list: " + integerGeneric.prime());
    }
}
